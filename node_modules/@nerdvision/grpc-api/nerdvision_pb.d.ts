// package: com.nerdvision.grpc
// file: nerdvision.proto

import * as jspb from "google-protobuf";

export class BreakpointConnection extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BreakpointConnection.AsObject;
  static toObject(includeInstance: boolean, msg: BreakpointConnection): BreakpointConnection.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BreakpointConnection, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BreakpointConnection;
  static deserializeBinaryFromReader(message: BreakpointConnection, reader: jspb.BinaryReader): BreakpointConnection;
}

export namespace BreakpointConnection {
  export type AsObject = {
  }
}

export class BreakpointResponse extends jspb.Message {
  getMessageId(): number;
  setMessageId(value: number): void;

  clearBreakpointsList(): void;
  getBreakpointsList(): Array<BreakpointResponse.Breakpoint>;
  setBreakpointsList(value: Array<BreakpointResponse.Breakpoint>): void;
  addBreakpoints(value?: BreakpointResponse.Breakpoint, index?: number): BreakpointResponse.Breakpoint;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BreakpointResponse.AsObject;
  static toObject(includeInstance: boolean, msg: BreakpointResponse): BreakpointResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BreakpointResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BreakpointResponse;
  static deserializeBinaryFromReader(message: BreakpointResponse, reader: jspb.BinaryReader): BreakpointResponse;
}

export namespace BreakpointResponse {
  export type AsObject = {
    messageId: number,
    breakpointsList: Array<BreakpointResponse.Breakpoint.AsObject>,
  }

  export class Breakpoint extends jspb.Message {
    getBreakpointId(): string;
    setBreakpointId(value: string): void;

    getWorkspaceId(): string;
    setWorkspaceId(value: string): void;

    getRelPath(): string;
    setRelPath(value: string): void;

    getLineNo(): number;
    setLineNo(value: number): void;

    getSrcType(): BreakpointResponse.Breakpoint.SourceType;
    setSrcType(value: BreakpointResponse.Breakpoint.SourceType): void;

    getArgsMap(): jspb.Map<string, string>;
    clearArgsMap(): void;
    getCondition(): string;
    setCondition(value: string): void;

    getNamedWatchersMap(): jspb.Map<string, string>;
    clearNamedWatchersMap(): void;
    getFireCount(): number;
    setFireCount(value: number): void;

    getType(): string;
    setType(value: string): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Breakpoint.AsObject;
    static toObject(includeInstance: boolean, msg: Breakpoint): Breakpoint.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Breakpoint, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Breakpoint;
    static deserializeBinaryFromReader(message: Breakpoint, reader: jspb.BinaryReader): Breakpoint;
  }

  export namespace Breakpoint {
    export type AsObject = {
      breakpointId: string,
      workspaceId: string,
      relPath: string,
      lineNo: number,
      srcType: BreakpointResponse.Breakpoint.SourceType,
      argsMap: Array<[string, string]>,
      condition: string,
      namedWatchersMap: Array<[string, string]>,
      fireCount: number,
      type: string,
    }

    export enum SourceType {
      JAVA = 0,
      TYPE_SCRIPT = 1,
      PYTHON = 2,
    }
  }
}

