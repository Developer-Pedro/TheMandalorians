// GENERATED CODE -- DO NOT EDIT!

'use strict';
var grpc = require('grpc');
var nerdvision_pb = require('./nerdvision_pb.js');

function serialize_com_nerdvision_grpc_BreakpointConnection(arg) {
  if (!(arg instanceof nerdvision_pb.BreakpointConnection)) {
    throw new Error('Expected argument of type com.nerdvision.grpc.BreakpointConnection');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_com_nerdvision_grpc_BreakpointConnection(buffer_arg) {
  return nerdvision_pb.BreakpointConnection.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_com_nerdvision_grpc_BreakpointResponse(arg) {
  if (!(arg instanceof nerdvision_pb.BreakpointResponse)) {
    throw new Error('Expected argument of type com.nerdvision.grpc.BreakpointResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_com_nerdvision_grpc_BreakpointResponse(buffer_arg) {
  return nerdvision_pb.BreakpointResponse.deserializeBinary(new Uint8Array(buffer_arg));
}


// This is the service that will stream the breakpoint configuration changes to the clients. 
var NerdVisionBreakpointsService = exports.NerdVisionBreakpointsService = {
  // This will connect to the service and begin streaming the responses to the client. 
  streamBreakpoints: {
    path: '/com.nerdvision.grpc.NerdVisionBreakpoints/streamBreakpoints',
    requestStream: false,
    responseStream: true,
    requestType: nerdvision_pb.BreakpointConnection,
    responseType: nerdvision_pb.BreakpointResponse,
    requestSerialize: serialize_com_nerdvision_grpc_BreakpointConnection,
    requestDeserialize: deserialize_com_nerdvision_grpc_BreakpointConnection,
    responseSerialize: serialize_com_nerdvision_grpc_BreakpointResponse,
    responseDeserialize: deserialize_com_nerdvision_grpc_BreakpointResponse,
  },
};

exports.NerdVisionBreakpointsClient = grpc.makeGenericClientConstructor(NerdVisionBreakpointsService);
