import Events from './apis/Events';
import Breakpoints from './Breakpoints';
import { NerdVisionApiKey, NerdVisionConfig } from './models/NerdVisionConfig';
import AgentRegistration from './apis/AgentRegistration';
import { Debug } from './apis/Debug';
import { GRPC } from './apis/GRPC';
import Startup from './utils/startup/Startup';
import FileLoader from './utils/FileLoader';
export declare class NerdVisionAgent {
    private _events;
    private _breakpoints;
    private _debug;
    private _grpc;
    private _clientReg;
    private _startup;
    private _fileLoader;
    private stages;
    private lastRetry;
    private retrying;
    private retryTimeout;
    private closing;
    constructor(_events: Events, _breakpoints: Breakpoints, _debug: Debug, _grpc: GRPC, _clientReg: AgentRegistration, _startup: Startup, _fileLoader: FileLoader);
    /**
     * Start up the nerd.vision agent
     *
     * @param config NerdVisionApiKey | NerdVisionConfig - The configuration for the agent. You can pass through an API key, or a full configuration object
     */
    init(config: NerdVisionApiKey | NerdVisionConfig): Promise<void>;
    /**
     * Ensure the node agent starts and stops cleanly by wrapping the given function
     *
     * @param config NerdVisionApiKey | NerdVisionConfig - The configuration for the agent. You can pass through an API key, or a full configuration object
     * @param wrapped The function that should be wrapped
     */
    wrap(config: NerdVisionApiKey | NerdVisionConfig, wrapped: () => any): Promise<void>;
    /**
     * Close the connection to nerd.vision
     */
    close(): void;
    /**
     * Perform the actual agent startup
     *
     * @param config NerdVisionApiKey | NerdVisionConfig - The configuration for the agent. You can pass through an API key, or a full configuration object
     */
    private startup;
    /**
     * Set up the configuration object
     * @param config
     */
    private configure;
    private loadPackageJson;
    /**
     * Find the package.json of the app we're running inside
     */
    private findRoot;
    private register;
    private debug;
    private getAppName;
}
