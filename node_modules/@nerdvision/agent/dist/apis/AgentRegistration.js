"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Request_1 = __importDefault(require("../utils/Request"));
const Logger_1 = __importDefault(require("../utils/Logger"));
const Configuration_1 = __importDefault(require("../models/Configuration"));
const crypto_1 = require("crypto");
const os_1 = require("os");
const Injectable_1 = __importDefault(require("../decorators/Injectable"));
const theInjectables_1 = require("../theInjectables");
const Inject_1 = __importDefault(require("../decorators/Inject"));
const FileLoader_1 = __importDefault(require("../utils/FileLoader"));
let AgentRegistration = class AgentRegistration {
    constructor(request, _packagePath, _fileLoader) {
        this.request = request;
        this._packagePath = _packagePath;
        this._fileLoader = _fileLoader;
    }
    get packageVersion() {
        return this._packageJson.version;
    }
    get product() {
        const versionSplit = this._packageJson.version.split('.');
        return {
            micro_version: versionSplit[2],
            major_version: versionSplit[0],
            minor_version: versionSplit[1],
            path: __filename,
            build: this._packageJson.version,
            name: 'nerdvision Node.js Agent',
            version: this._packageJson.version,
            properties: {}
        };
    }
    get network() {
        const parsedInterfaces = this.networkInterfaces;
        return {
            hostname: os_1.hostname(),
            interfaces: parsedInterfaces,
            address: parsedInterfaces[parsedInterfaces.length - 1].addresses[0].address
        };
    }
    get networkInterfaces() {
        const interfaces = os_1.networkInterfaces();
        return Object.keys(interfaces)
            .map(key => {
            const ints = interfaces[key];
            return {
                addresses: ints.map(i => ({ address: i.address })),
                name: key,
                mac: ints[0].mac
            };
        });
    }
    get lang() {
        return {
            name: 'Node.js',
            type: 'javascript',
            version: process.version,
        };
    }
    get os() {
        const now = new Date().valueOf();
        let rawLang = process.env.LC_ALL || process.env.LC_MESSAGES || process.env.LANG || process.env.LANGUAGE || '';
        rawLang = rawLang.split('.')[0] || '';
        rawLang = rawLang.split('_');
        return {
            start_ts: now - (os_1.uptime() * 1000),
            timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
            name: os_1.type(),
            arch: os_1.arch(),
            time: new Date().valueOf(),
            lang: rawLang[0] || '',
            locale: rawLang[1] || '',
            version: os_1.release()
        };
    }
    get instance() {
        const now = new Date().valueOf();
        return {
            start_ts: now - (process.uptime() * 1000),
            name: Configuration_1.default.appName
        };
    }
    loadPackage() {
        return __awaiter(this, void 0, void 0, function* () {
            const raw = yield this._fileLoader.loadFile(__dirname + this._packagePath);
            this._packageJson = JSON.parse(raw);
        });
    }
    register(shortTimeout = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const clientId = this.generateClientId();
            Logger_1.default.info('client ID', clientId);
            Logger_1.default.info('licensing against', Configuration_1.default.apiUrl);
            const resp = yield this.request.post(Configuration_1.default.apiUrl, '/licensing-api/agent', {
                uid: clientId,
                api_key: Configuration_1.default.apiKey,
                product: this.product,
                instance: this.instance,
                os: this.os,
                language: this.lang,
                env: process.env,
                network: this.network,
                tags: Configuration_1.default.tags,
            }, { Authorization: this.generateAuthToken(clientId) }, { timeout: shortTimeout ? 1000 : undefined });
            Logger_1.default.info('successfully licensed', resp.session);
            Configuration_1.default.authorization = this.generateAuthToken(resp.session);
            return resp.session;
        });
    }
    generateAuthToken(username) {
        const authentication = `${username}:${Configuration_1.default.apiKey}`;
        return `Basic ${Buffer.from(authentication).toString('base64')}`;
    }
    generateClientId() {
        let rawId = Configuration_1.default.appName;
        rawId += os_1.hostname();
        rawId += Object.keys(Configuration_1.default.tags)
            .sort()
            .map(key => key + Configuration_1.default.tags[key])
            .join();
        return crypto_1.createHash('md5')
            .update(rawId)
            .digest('hex');
    }
};
AgentRegistration = __decorate([
    Injectable_1.default(),
    __param(1, Inject_1.default(theInjectables_1.PACKAGE_JSON)),
    __metadata("design:paramtypes", [Request_1.default, String, FileLoader_1.default])
], AgentRegistration);
exports.default = AgentRegistration;
