"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Request_1 = __importDefault(require("../utils/Request"));
const Logger_1 = __importDefault(require("../utils/Logger"));
const Configuration_1 = __importDefault(require("../models/Configuration"));
const Injectable_1 = __importDefault(require("../decorators/Injectable"));
let Events = class Events {
    constructor(request) {
        this.request = request;
    }
    push(snapshot) {
        const breakpoint = snapshot.breakpoint;
        const breakpointPath = this.getBreakpointPath(breakpoint);
        Logger_1.default.info(`pushing snapshot for ${breakpointPath} in workspace ${breakpoint.getWorkspaceId()}`);
        this.request.post(Configuration_1.default.apiUrl, `/context/v2/eventsnapshot?breakpoint_id=${breakpoint.getBreakpointId()}&workspace_id=${breakpoint.getWorkspaceId()}`, snapshot, { Authorization: Configuration_1.default.authorization })
            .then(() => Logger_1.default.breakpoint('pushed snapshot for', breakpoint))
            .catch(e => Logger_1.default.error(`failed to push fired breakpoint ${breakpointPath}: ${e.message}`));
    }
    getBreakpointPath(breakpoint) {
        const lineNumber = breakpoint.getLineNo() - 1; // nerd.vision line numbers start at 1, js starts at 0
        return `${breakpoint.getRelPath()}:${lineNumber} (nv: ${breakpoint.getLineNo()})`;
    }
};
Events = __decorate([
    Injectable_1.default(),
    __metadata("design:paramtypes", [Request_1.default])
], Events);
exports.default = Events;
