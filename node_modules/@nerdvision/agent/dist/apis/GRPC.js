"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const grpc_1 = require("grpc");
const grpc_api_1 = require("@nerdvision/grpc-api");
const nerdvision_grpc_pb_1 = require("@nerdvision/grpc-api/nerdvision_grpc_pb");
const Breakpoints_1 = __importDefault(require("../Breakpoints"));
const Logger_1 = __importDefault(require("../utils/Logger"));
const Configuration_1 = __importDefault(require("../models/Configuration"));
const Injectable_1 = __importDefault(require("../decorators/Injectable"));
let GRPC = class GRPC {
    constructor(_breakpoints) {
        this._breakpoints = _breakpoints;
        this.client = null;
        this.stream = null;
    }
    connect(shortTimeout = false) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this.client = new nerdvision_grpc_pb_1.NerdVisionBreakpointsClient(`${Configuration_1.default.apiUrl}:443`, grpc_1.credentials.createSsl());
                const meta = new grpc_1.Metadata();
                meta.add('Authorization', Configuration_1.default.authorization);
                this.stream = this.client.streamBreakpoints(new grpc_api_1.BreakpointConnection(), meta);
                const timeout = shortTimeout ? setTimeout(() => this.stream.cancel(), 1000) : null;
                this.stream.on('data', (response) => __awaiter(this, void 0, void 0, function* () {
                    if (timeout) {
                        clearTimeout(timeout);
                    }
                    yield this._breakpoints.mergeList(response.getBreakpointsList());
                    resolve(); // once we've received breakpoints & registered them, we can let the application run
                }));
                this.stream.on('error', (error) => {
                    if (error.details !== 'Cancelled') {
                        Logger_1.default.error('stream error', error);
                    }
                    reject(error.details === 'Cancelled' ? error.details : error);
                });
                this.stream.on('end', () => Logger_1.default.info('stream was ended'));
            }));
        });
    }
    close() {
        if (this.stream) {
            this.stream.cancel();
        }
        if (this.client) {
            this.client.close();
        }
    }
};
GRPC = __decorate([
    Injectable_1.default(),
    __metadata("design:paramtypes", [Breakpoints_1.default])
], GRPC);
exports.GRPC = GRPC;
