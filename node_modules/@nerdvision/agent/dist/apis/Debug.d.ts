/// <reference types="node" />
import inspector, { Debugger, InspectorNotification } from 'inspector';
import { BreakpointResponse } from '@nerdvision/grpc-api';
import { Map } from 'google-protobuf';
import RuntimeProps from './RuntimeProps';
import Mappings from '../utils/Mappings';
export declare type DebugBreakpointHitHandler = (message: InspectorNotification<Debugger.PausedEventDataType>) => void;
export declare class Debug {
    private _mapping;
    protected session: inspector.Session;
    protected _handlers: {
        [key: string]: DebugBreakpointHitHandler;
    };
    constructor(_mapping: Mappings, session: inspector.Session);
    /**
     * Connect to the node debugger
     */
    init(): Promise<void>;
    /**
     * Set a breakpoint on the node debugger
     *
     * @param breakpoint The breakpoint to set
     * @param params The breakpoint parameters
     * @param handler The handler for when the breakpoint fires
     */
    addBreakpoint(breakpoint: BreakpointResponse.Breakpoint, params: Debugger.SetBreakpointByUrlParameterType, handler: DebugBreakpointHitHandler): Debugger.BreakpointId;
    /**
     * Remove a breakpoint from the node debugger
     *
     * @param breakpointId The breakpoint id from node
     */
    removeBreakpoint(breakpointId: string): void;
    /**
     * Evaluate a set of watchers on the given call frame
     *
     * @param namedWatchers The watchers
     * @param callFrameId The cool frame id
     * @param runtimeProps The variable reference
     */
    addWatchers(namedWatchers: Map<string, string>, callFrameId: string, runtimeProps: RuntimeProps): Array<{}>;
    /**
     * Get the value of the named watcher
     *
     * @param expression The expression to evaluate
     * @param callFrameId The call frame to evaluate it on
     */
    private evaluateNamedWatcher;
    /**
     * Handle the debugger pausing
     *
     * @param message The information at the time of pausing
     */
    private debuggerPaused;
    /**
     * Handle a script being parsed by node
     *
     * @param message Information about the parsed file
     */
    private debuggerScriptParsed;
}
