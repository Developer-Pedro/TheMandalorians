/// <reference types="node" />
import { BreakpointResponse } from '@nerdvision/grpc-api';
import inspector, { Debugger } from 'inspector';
import { Debug } from './apis/Debug';
import Events from './apis/Events';
import Mappings from './utils/Mappings';
export interface BreakpointListItem {
    breakpoint: BreakpointResponse.Breakpoint;
    breakpointId: Debugger.BreakpointId;
    column?: number;
}
export default class Breakpoints {
    private _debug;
    private _events;
    private _mappings;
    private session;
    protected _list: BreakpointListItem[];
    private _pending;
    constructor(_debug: Debug, _events: Events, _mappings: Mappings, session: inspector.Session);
    /**
     * Update the set breakpoints with the new list of breakpoints
     *
     * @param newBreakpoints The list of breakpoints that should be set
     */
    mergeList(newBreakpoints: BreakpointResponse.Breakpoint[]): Promise<void>;
    /**
     * Find the requested breakpoint
     *
     * @param breakpointId The id of the breakpoint
     */
    find(breakpointId: Debugger.BreakpointId): BreakpointListItem | null;
    /**
     * Add the given breakpoint
     *
     * @param breakpoint The breakpoint to add
     */
    addBreakpoint(breakpoint: BreakpointResponse.Breakpoint): Promise<void>;
    /**
     * Remove a breakpoint
     *
     * @param breakpoint The breakpoint to remove
     */
    protected removeBreakpoint(breakpoint: BreakpointListItem): void;
    /**
     * Handle a breakpoint being fired
     *
     * @param message The information about the current state of the application
     */
    private breakpointFired;
    /**
     * Update the fire count of a breakpoint
     *
     * @param breakpoint The breakpoint to check
     */
    protected checkFireCount(breakpoint: BreakpointListItem): void;
    /**
     * Generate a snapshot based on the given call frames
     *
     * @param callFrames The call frames
     * @param namedWatchersMap Any named watchers that need processing
     */
    private generateSnapshot;
    /**
     * Convert the raw file paths and numbers back into the source files where possible
     *
     * @param snapshot The raw snapshot
     * @param breakpoint The full breakpoint
     */
    private resolveMappings;
    /**
     * When a source map is parsed, see if any pending breakpoints are applicable, and set them
     *
     * @param path The file path that was parsed
     * @param map The source map
     */
    private mappingParsed;
}
