import { Type } from '../decorators/Injectable';
import InjectToken from './InjectToken';
export declare type Provider = {
    token: InjectToken | any;
    use: any;
};
export default class Container {
    /**
     * A list of already instantiated classes, currently all classes are singletons
     */
    private instances;
    /**
     * Any providers that have been explicitly defined
     */
    private providers;
    /**
     * Instantiate an @Injectable() class and return it
     *
     * @param target The class to instantiate
     * @param providers A list of providers, these take priority over automatic injection
     */
    static bootstrap<T>(target: Type<any>, providers?: Provider[]): T;
    /**
     * Add providers
     *
     * @param providers
     */
    addProviders(providers: Provider[]): this;
    /**
     * Instantiate the requested class and its' dependencies
     *
     * @param requested The class to instantiate
     * @param injectChain The parent chain of parents that requested this class
     */
    private resolve;
    /**
     * Get a provider from an InjectToken
     *
     * @param token
     */
    private getProvider;
}
