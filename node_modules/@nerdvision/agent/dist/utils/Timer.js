"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Injectable_1 = __importDefault(require("../decorators/Injectable"));
let Timer = class Timer {
    // TODO: allow multiple timers?
    start() {
        this.startTime = process.hrtime();
    }
    rawDiff() {
        if (!Number.isInteger(this._diff)) {
            this.end();
        }
        return this._diff;
    }
    diff() {
        if (!Number.isInteger(this._diff)) {
            this.end();
        }
        return this._diffString;
    }
    end() {
        const [seconds, nanoseconds] = process.hrtime(this.startTime);
        this._diff = (seconds * 1e9) + nanoseconds;
        this._diffString = this.buildString();
    }
    buildString() {
        let tempDiff = this._diff;
        if (tempDiff < 1000) {
            return `${this.floatToString(tempDiff)}ns`;
        }
        tempDiff /= 1000;
        if (tempDiff < 1000) {
            return `${this.floatToString(tempDiff)}Î¼s`;
        }
        tempDiff /= 1000;
        if (tempDiff < 1000) {
            return `${this.floatToString(tempDiff)}ms`;
        }
        tempDiff /= 1000;
        if (tempDiff < 60) {
            return `${this.floatToString(tempDiff)}s`;
        }
        tempDiff /= 60;
        // hopefully nothing reaches minute lengths
        return `${this.floatToString(tempDiff)}m`;
    }
    floatToString(float) {
        return `${+float.toFixed(3)}`;
    }
};
Timer = __decorate([
    Injectable_1.default()
], Timer);
exports.default = Timer;
