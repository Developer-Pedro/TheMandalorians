"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const util_1 = require("util");
const Events_1 = __importDefault(require("./apis/Events"));
const Breakpoints_1 = __importDefault(require("./Breakpoints"));
const Logger_1 = __importDefault(require("./utils/Logger"));
const AgentRegistration_1 = __importDefault(require("./apis/AgentRegistration"));
const Debug_1 = require("./apis/Debug");
const Configuration_1 = __importDefault(require("./models/Configuration"));
const GRPC_1 = require("./apis/GRPC");
const Injectable_1 = __importDefault(require("./decorators/Injectable"));
const Startup_1 = __importDefault(require("./utils/startup/Startup"));
const FileLoader_1 = __importDefault(require("./utils/FileLoader"));
let NerdVisionAgent = class NerdVisionAgent {
    constructor(_events, _breakpoints, _debug, _grpc, _clientReg, _startup, _fileLoader) {
        this._events = _events;
        this._breakpoints = _breakpoints;
        this._debug = _debug;
        this._grpc = _grpc;
        this._clientReg = _clientReg;
        this._startup = _startup;
        this._fileLoader = _fileLoader;
        this.stages = {
            configured: false,
            loadedPackage: false,
            foundRoot: false,
            registered: false,
            debug: false,
            appName: false
        };
        this.lastRetry = 25;
        this.retrying = false;
        this.closing = false;
    }
    /**
     * Start up the nerd.vision agent
     *
     * @param config NerdVisionApiKey | NerdVisionConfig - The configuration for the agent. You can pass through an API key, or a full configuration object
     */
    init(config) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // await this._startup.run();
                yield this.startup(config);
                Logger_1.default.disable = false;
                this.retrying = false;
                Logger_1.default.info('Connected to nerd.vision');
            }
            catch (e) {
                if (this.closing) {
                    return;
                }
                Logger_1.default.error(`Failed to start the nerd.vision debugger, we will keep retrying in the background:`, e);
                Logger_1.default.disable = true;
                this.retrying = true;
                this.retryTimeout = setTimeout(() => this.init(config), this.lastRetry);
                if (this.lastRetry < 30000) {
                    this.lastRetry *= 2;
                }
            }
        });
    }
    /**
     * Ensure the node agent starts and stops cleanly by wrapping the given function
     *
     * @param config NerdVisionApiKey | NerdVisionConfig - The configuration for the agent. You can pass through an API key, or a full configuration object
     * @param wrapped The function that should be wrapped
     */
    wrap(config, wrapped) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.init(config);
            yield wrapped();
            this.close();
        });
    }
    /**
     * Close the connection to nerd.vision
     */
    close() {
        Logger_1.default.info('disconnecting');
        // TODO COMS-421 should block until all snapshots have finished sending
        this.closing = true;
        if (this.retryTimeout) {
            clearTimeout(this.retryTimeout);
        }
        this._grpc.close();
    }
    /**
     * Perform the actual agent startup
     *
     * @param config NerdVisionApiKey | NerdVisionConfig - The configuration for the agent. You can pass through an API key, or a full configuration object
     */
    startup(config) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.stages.configured) {
                this.configure(config);
            }
            if (!this.stages.loadedPackage) {
                yield this.loadPackageJson();
            }
            if (!this.stages.foundRoot) {
                yield this.findRoot();
            }
            if (!this.stages.appName) {
                yield this.getAppName();
            }
            if (!this.stages.debug) {
                yield this.debug();
            }
            if (!this.stages.registered) {
                yield this.register();
            }
            yield this._grpc.connect(!this.retrying);
        });
    }
    /**
     * Set up the configuration object
     * @param config
     */
    configure(config) {
        if (typeof config === 'string') {
            config = { apiKey: config };
        }
        Configuration_1.default.apiKey = config.apiKey;
        if (config.name) {
            Configuration_1.default.appName = config.name;
        }
        this.stages.appName = !!config.name;
        if (config.apiUrl) {
            Configuration_1.default.apiUrl = config.apiUrl;
        }
        if (config.debug) {
            Configuration_1.default.debug = config.debug;
        }
        if (config.tags) {
            Configuration_1.default.tags = config.tags;
        }
        this.stages.configured = true;
    }
    loadPackageJson() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._clientReg.loadPackage();
            Logger_1.default.info(`starting up https://nerd.vision node agent v${this._clientReg.packageVersion}`);
            this.stages.loadedPackage = true;
        });
    }
    /**
     * Find the package.json of the app we're running inside
     */
    findRoot() {
        return __awaiter(this, void 0, void 0, function* () {
            let folders = process.mainModule.filename.split('/').slice(0, -1);
            do {
                try {
                    const current = folders.join('/') || '/';
                    yield util_1.promisify(fs_1.access)(`${current}/package.json`);
                    Logger_1.default.info('application root', current);
                    Configuration_1.default.rootPath = current;
                    Configuration_1.default.root = `file://${current}`;
                    this.stages.foundRoot = true;
                    return;
                }
                catch (e) {
                    folders.pop();
                }
            } while (folders.length);
            throw new Error('Couldn\'t find a package.json');
        });
    }
    register() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._clientReg.register(!this.retrying);
            this.stages.registered = true;
        });
    }
    debug() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._debug.init();
            this.stages.debug = true;
        });
    }
    getAppName() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const raw = yield this._fileLoader.loadFile(`${Configuration_1.default.rootPath}/package.json`);
                const packageJson = JSON.parse(raw);
                Configuration_1.default.appName = packageJson.name;
            }
            catch (e) {
                Configuration_1.default.appName = 'my-node-app';
            }
            this.stages.appName = true;
        });
    }
};
NerdVisionAgent = __decorate([
    Injectable_1.default(),
    __metadata("design:paramtypes", [Events_1.default,
        Breakpoints_1.default,
        Debug_1.Debug,
        GRPC_1.GRPC,
        AgentRegistration_1.default,
        Startup_1.default,
        FileLoader_1.default])
], NerdVisionAgent);
exports.NerdVisionAgent = NerdVisionAgent;
