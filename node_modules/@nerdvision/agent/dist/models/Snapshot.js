"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Scope_1 = __importDefault(require("./Scope"));
class Snapshot {
    constructor(timestamp, frames) {
        this._ts = timestamp;
        this._stacktrace = frames.map(frame => new Scope_1.default(frame));
    }
    get breakpoint() {
        return this._breakpoint;
    }
    set breakpoint(value) {
        this._breakpoint = value;
    }
    get named_watches() {
        return this._named_watches;
    }
    set named_watches(value) {
        this._named_watches = value;
    }
    toJSON() {
        let breakpoint = this._breakpoint ? this._breakpoint.toObject() : null;
        if (breakpoint) {
            breakpoint = this.formatBreakpoint(breakpoint);
        }
        return {
            ts: this._ts,
            stacktrace: this._stacktrace,
            breakpoint,
            named_watches: this._named_watches || []
        };
    }
    /**
     * This function formats the breakpoint the same way the Java/Python agents do
     * It takes in an object (but typing this caused errors when doing breakpoint.args)
     *
     * @param breakpoint
     */
    formatBreakpoint(breakpoint) {
        breakpoint.args = {};
        breakpoint.argsMap.forEach(([key, value]) => {
            breakpoint.args[key] = value;
        });
        const named_watches = Object.assign({}, ...[...breakpoint.namedWatchersMap.entries()]
            .map(([index, [id, value]]) => ({ [id]: value })));
        return {
            args: breakpoint.args,
            breakpoint_id: breakpoint.breakpointId,
            workspace_id: breakpoint.workspaceId,
            rel_path: breakpoint.relPath,
            line_no: breakpoint.lineNo,
            src_type: breakpoint.srcType,
            condition: breakpoint.condition,
            named_watches: named_watches,
            fire_count: breakpoint.fireCount
        };
    }
}
exports.default = Snapshot;
